!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ACYCLIC_ITERABLE	dag_implicit.hpp	2;"	d
ALLOC	event_iterator.cpp	7;"	d	file:
CFLAGS	Makefile	/^CFLAGS :=$/;"	m
EVENT_ITERATOR	event_iterator.hpp	2;"	d
FREQDATA_DEFAULT_PATH	mutator.cpp	5;"	d	file:
LOADER_H	loader.hpp	2;"	d
SOURCE_FILES	Makefile	/^SOURCE_FILES := event_iterator.cpp$/;"	m
STATIC_ARRLEN	event_iterator.cpp	8;"	d	file:
THROW_ERROR	event_iterator.cpp	9;"	d	file:
__global_event_list	event_iterator.cpp	/^static event_list *__global_event_list;$/;"	v	file:
added_index	event_iterator.hpp	/^	int identifier, added_index;$/;"	m	struct:outcome
begin	dag_implicit.hpp	/^	inline dijkstra_iterator begin(void)$/;"	f	class:dag_implicit
complete	dag_implicit.hpp	/^dag_implicit<T>::dijkstra_iterator::complete(void) const$/;"	f	class:dag_implicit::dijkstra_iterator
dag_implicit	dag_implicit.hpp	/^class dag_implicit {$/;"	c
dag_implicit	dag_implicit.hpp	/^dag_implicit<T>::dag_implicit(expander_t expand, edge_cost_t edge_cost)$/;"	f	class:dag_implicit
depth	dag_implicit.hpp	/^	unsigned long long depth;$/;"	m	struct:node_cost
destination_node	dag_implicit.hpp	/^	T* destination_node;$/;"	m	struct:node_cost
dijkstra_iterator	dag_implicit.hpp	/^	class dijkstra_iterator {$/;"	c	class:dag_implicit
dijkstra_q	dag_implicit.hpp	/^			       greater<node_cost<T>>> dijkstra_q;$/;"	m	class:dag_implicit::dijkstra_iterator
edge_cost	dag_implicit.hpp	/^		edge_cost_t edge_cost;$/;"	m	class:dag_implicit::dijkstra_iterator
edge_cost	dag_implicit.hpp	/^	edge_cost_t edge_cost;$/;"	m	class:dag_implicit
edge_cost_t	dag_implicit.hpp	/^	typedef double (*edge_cost_t)(T*,T*);$/;"	t	class:dag_implicit
end	dag_implicit.hpp	/^	inline dijkstra_iterator end(void)$/;"	f	class:dag_implicit
event_iteration_cb	mutator.cpp	/^static void event_iteration_cb(const vector<int>& outcomes, void *cb_data)$/;"	f	file:
event_iteration_cb	test.cpp	/^static void event_iteration_cb(const vector<int>& outcomes, void *cb_data)$/;"	f	file:
event_list	event_iterator.cpp	/^event_list::event_list(int n_events)$/;"	f	class:event_list
event_list	event_iterator.hpp	/^class event_list {$/;"	c
events	event_iterator.hpp	/^	vector<vector<outcome>> events;$/;"	m	class:event_list
expand	dag_implicit.hpp	/^		expander_t expand;$/;"	m	class:dag_implicit::dijkstra_iterator
expand	dag_implicit.hpp	/^	expander_t expand;$/;"	m	class:dag_implicit
expand_outcome_list	event_iterator.cpp	/^static vector<outcome_list> expand_outcome_list(outcome_list *list)$/;"	f	file:
expander_t	dag_implicit.hpp	/^	typedef vector<T> (*expander_t)(T*);$/;"	t	class:dag_implicit
frequency	loader.hpp	/^typedef unsigned long long frequency;$/;"	t
frequency	mutator.cpp	/^typedef unsigned long long frequency;$/;"	t	file:
frequency_data_loader	loader.hpp	/^class frequency_data_loader {$/;"	c
get_leadingchar_frequencies	loader.cpp	/^frequency_data_loader::get_leadingchar_frequencies(unsigned char leadingchar,$/;"	f	class:frequency_data_loader
get_normalchar_frequencies	loader.cpp	/^frequency_data_loader::get_normalchar_frequencies(unsigned char normalchar,$/;"	f	class:frequency_data_loader
get_prefix_frequencies	loader.cpp	/^frequency_data_loader::get_prefix_frequencies(vector<string>& prefixes,$/;"	f	class:frequency_data_loader
get_suffix_frequencies	loader.cpp	/^frequency_data_loader::get_suffix_frequencies(vector<string>& suffixes,$/;"	f	class:frequency_data_loader
identifier	event_iterator.hpp	/^	int identifier, added_index;$/;"	m	struct:outcome
iterate_sorted	event_iterator.cpp	/^void event_list::iterate_sorted(iterator_cb_t iterator_cb, void *cb_data)$/;"	f	class:event_list
iterator_cb_t	event_iterator.hpp	/^typedef void (*iterator_cb_t)(const vector<int>& outcomes, void *cb_data);$/;"	t
leading_replacement_chars	loader.hpp	/^	vector<char> leading_replacement_chars[256];$/;"	m	class:frequency_data_loader
leading_replacement_frequencies	loader.hpp	/^	vector<frequency> leading_replacement_frequencies[256];$/;"	m	class:frequency_data_loader
likelier	event_iterator.cpp	/^static int likelier(struct outcome a, struct outcome b)$/;"	f	file:
load_frequency_file	loader.cpp	/^frequency_data_loader::load_frequency_file(string freqfile_path)$/;"	f	class:frequency_data_loader
load_leadingchar_frequencies	loader.cpp	/^frequency_data_loader::load_leadingchar_frequencies(ifstream input_stream)$/;"	f	class:frequency_data_loader
load_normalchar_frequencies	loader.cpp	/^frequency_data_loader::load_normalchar_frequencies(ifstream input_stream)$/;"	f	class:frequency_data_loader
load_prefix_frequencies	loader.cpp	/^frequency_data_loader::load_prefix_frequencies(ifstream input_stream)$/;"	f	class:frequency_data_loader
load_suffix_frequencies	loader.cpp	/^frequency_data_loader::load_suffix_frequencies(ifstream input_stream)$/;"	f	class:frequency_data_loader
logarithmic_probability	event_iterator.hpp	/^	double logarithmic_probability;$/;"	m	struct:outcome
main	mutator.cpp	/^int main(int argc, char *argv[])$/;"	f
main	test.cpp	/^int main(int argc, char *argv[])$/;"	f
n_events	event_iterator.cpp	/^	int n_events;$/;"	m	class:outcome_list	file:
n_events	event_iterator.hpp	/^	int n_events;$/;"	m	class:event_list
node_cost	dag_implicit.hpp	/^struct node_cost {$/;"	s
nodes_enqueued	dag_implicit.hpp	/^		set<T> nodes_enqueued;$/;"	m	class:dag_implicit::dijkstra_iterator
normal_replacement_chars	loader.hpp	/^	vector<char> normal_replacement_chars[256];$/;"	m	class:frequency_data_loader
normal_replacement_frequencies	loader.hpp	/^	vector<frequency> normal_replacement_frequencies[256];$/;"	m	class:frequency_data_loader
operator !=	dag_implicit.hpp	/^	inline bool operator !=(const node_cost& rhs) const$/;"	f	struct:node_cost
operator !=	dag_implicit.hpp	/^dag_implicit<T>::dijkstra_iterator::operator !=(const dijkstra_iterator& x)$/;"	f	class:dag_implicit::dijkstra_iterator
operator !=	event_iterator.cpp	/^bool outcome_list::operator !=(const outcome_list& rhs) const$/;"	f	class:outcome_list
operator *	dag_implicit.hpp	/^dag_implicit<T>::dijkstra_iterator::operator *()$/;"	f	class:dag_implicit::dijkstra_iterator
operator ++	dag_implicit.hpp	/^dag_implicit<T>::dijkstra_iterator::operator ++()$/;"	f	class:dag_implicit::dijkstra_iterator
operator <	dag_implicit.hpp	/^	inline bool operator <(const node_cost& rhs) const$/;"	f	struct:node_cost
operator <	event_iterator.cpp	/^bool outcome_list::operator <(const outcome_list& rhs) const$/;"	f	class:outcome_list
operator <=	event_iterator.cpp	/^bool outcome_list::operator <=(const outcome_list& rhs) const$/;"	f	class:outcome_list
operator ==	dag_implicit.hpp	/^	inline bool operator ==(const node_cost& rhs) const$/;"	f	struct:node_cost
operator ==	dag_implicit.hpp	/^dag_implicit<T>::dijkstra_iterator::operator ==(const dijkstra_iterator& x)$/;"	f	class:dag_implicit::dijkstra_iterator
operator ==	event_iterator.cpp	/^bool outcome_list::operator ==(const outcome_list& rhs) const$/;"	f	class:outcome_list
operator >	dag_implicit.hpp	/^	inline bool operator >(const node_cost& rhs) const$/;"	f	struct:node_cost
operator >	event_iterator.cpp	/^bool outcome_list::operator >(const outcome_list& rhs) const$/;"	f	class:outcome_list
operator >=	event_iterator.cpp	/^bool outcome_list::operator >=(const outcome_list& rhs) const$/;"	f	class:outcome_list
outcome	event_iterator.hpp	/^struct outcome {$/;"	s
outcome_idx_list	event_iterator.cpp	/^	int *outcome_idx_list;$/;"	m	class:outcome_list	file:
outcome_list	event_iterator.cpp	/^	inline outcome_list(void) {}$/;"	f	class:outcome_list
outcome_list	event_iterator.cpp	/^class outcome_list {$/;"	c	file:
outcome_list	event_iterator.cpp	/^outcome_list::outcome_list(const outcome_list& list)$/;"	f	class:outcome_list
outcome_list	event_iterator.cpp	/^outcome_list::outcome_list(int n_events, int *outcome_idx_list)$/;"	f	class:outcome_list
outcome_list_delta	event_iterator.cpp	/^static double outcome_list_delta(outcome_list* l_prev, outcome_list* l_next)$/;"	f	file:
prefix_frequencies	loader.hpp	/^	vector<frequency> prefix_frequencies;$/;"	m	class:frequency_data_loader
prefix_strings	loader.hpp	/^	vector<string> prefix_strings;$/;"	m	class:frequency_data_loader
print_outcome_list	event_iterator.cpp	/^static void print_outcome_list(outcome_list *list)$/;"	f	file:
read_char_freq_line	loader.cpp	/^read_char_freq_line(ifstream input_stream, vector<char>& chars,$/;"	f	file:
set_event_sample_space	event_iterator.cpp	/^void event_list::set_event_sample_space(int event_idx, vector<int> outcomes,$/;"	f	class:event_list
set_graph	dag_implicit.hpp	/^dag_implicit<T>::dijkstra_iterator::set_graph(expander_t expand,$/;"	f	class:dag_implicit::dijkstra_iterator
set_start	dag_implicit.hpp	/^dag_implicit<T>::dijkstra_iterator::set_start(T start_node)$/;"	f	class:dag_implicit::dijkstra_iterator
set_start	dag_implicit.hpp	/^dag_implicit<T>::set_start(T start_node)$/;"	f	class:dag_implicit
sort_sample_space	event_iterator.cpp	/^static void sort_sample_space(vector<struct outcome>& unsorted)$/;"	f	file:
start_node	dag_implicit.hpp	/^	T *start_node;$/;"	m	class:dag_implicit
stol	loader.cpp	/^stol(string num)$/;"	f	file:
total_cost	dag_implicit.hpp	/^	double total_cost;$/;"	m	struct:node_cost
~dag_implicit	dag_implicit.hpp	/^dag_implicit<T>::~dag_implicit(void)$/;"	f	class:dag_implicit
~event_list	event_iterator.cpp	/^event_list::~event_list(void)$/;"	f	class:event_list
~outcome_list	event_iterator.cpp	/^outcome_list::~outcome_list(void)$/;"	f	class:outcome_list
